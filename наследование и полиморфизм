import math

class Shape():

    def __init__(self):
        print('Shape created')
    
    def draw(self):
        raise NotImplementedError("Can't instantiate an abstract class")#чтобы их не импользовали выбрасываются исключения 

    def area(self):
        raise NotImplementedError("Can't instantiate an abstract class")

    def perimeter(self):
        raise NotImplementedError("Can't instantiate an abstract class")

class Rectangle(Shape):

    def __init__(self, width, higth):
        Shape.__init__(self)

        self.width = width
        self.higth = higth

        print('Rectangle created')

        Shape.area(self)

    def area(self):
        return self.width * self.higth

    def perimeter(self):
        return 2 * (self.width + self.higth)

    def draw(self):
        print(f'Drawing rectangle with width = {self.width} and higth = {self.higth}')

class Traingle(Shape):

    def __init__(self, a, b, c):
        Shape.__init__(self)

        self.a = a
        self.b = b 
        self.c = c

        print('Traingle created')

    def draw(self):
        print(f'Drawing traingle with sides = {self.a}, {self.b}, {self.c}')

    def area(self):
        s = (self.a + self.b + self.c)/2
        return math.sqrt(s * (s - self.a) * (s - self.b) * (s - self.c))

    def perimeter(self):
        return self.a + self.b +  self.c

shape = Shape()
rect = Rectangle(40, 60)

print(rect.area())

triangle = Traingle(10, 10, 10)
triangle.draw
print(triangle.area())
print(triangle.perimeter())

for shape in [rect, triangle]:
    shape.draw()
